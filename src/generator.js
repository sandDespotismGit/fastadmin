const mysql = require('mysql2/promise');
const express = require('express');
const pool = require('./db');
const config = require('../config/admin.json');
const multer = require("multer");
const path = require("path");
const fs = require("fs");
const searchFuse = require("./utils/search");
const { serialize } = require('v8');

const uploadDir = '/home/alex/Desktop/ProjectsAtlas/IPANELlanding/admin/static/images';

const storage = multer.diskStorage({
    destination: (req, file, cb) => {
        cb(null, uploadDir);
    },
    filename: (req, file, cb) => {
        const uniqueName = `${crypto.randomUUID()}${path.extname(file.originalname)}`;
        cb(null, uniqueName);
    }
});

const upload = multer({ storage });

module.exports = async function generateAdminRoutes(app) {


    // –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ‚Äî —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü
    app.get('/admin', async (req, res) => {
        const [tables] = await pool.execute('SHOW TABLES');
        const tableNames = tables.map(t => Object.values(t)[0]);
        res.render('tables', { tableNames });
    });

    // –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
    app.get('/admin/:table', async (req, res) => {
        const tableName = req.params.table;
        const [schema] = await pool.execute(`DESCRIBE \`${tableName}\``);
        console.log("SASASS", req.query)
        const sortField = req.query.sort || 'id';
        const sortOrder = req.query.order === 'desc' ? 'DESC' : 'ASC';

        let [rows] = await pool.execute(
            `SELECT * FROM \`${tableName}\` ORDER BY \`${sortField}\` ${sortOrder}`
        );

        const [tables] = await pool.execute('SHOW TABLES');
        const tableNames = tables.map(t => Object.values(t)[0]);
        // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π
        const [relations] = await pool.execute(`SELECT * FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE WHERE TABLE_SCHEMA = ? AND CONSTRAINT_NAME != 'PRIMARY'`, [config.database.database]);
        const displayFields = schema.map(col => { return [col.Field, col.Type] }).filter((elem) => config.tables[tableName].display.includes(elem[0]));
        if (req.query?.searchStr) {
            if (req.query?.searchStr != null || req.query?.searchStr != "") {
                rows = searchFuse(rows, displayFields, req.query.searchStr).map((elem) => elem.item)
            }
        }

        let relatedRows = [];

        let relatedData = {};

        try {
            if (config.tables[tableName].keys.length > 0) {
                const filteredRelations = relations.filter(
                    (elem) =>
                        elem.TABLE_NAME === tableName &&
                        config.tables[tableName].keys.includes(elem.COLUMN_NAME) &&
                        elem.REFERENCED_TABLE_NAME &&
                        elem.REFERENCED_COLUMN_NAME
                );

                const relatedRowsArray = await Promise.all(
                    filteredRelations.map(async (related) => {
                        const [rows] = await pool.execute(
                            `SELECT * FROM \`${related.REFERENCED_TABLE_NAME}\``
                        );
                        return {
                            table: related.REFERENCED_TABLE_NAME,
                            rows
                        };
                    })
                );

                // –°–æ–±–∏—Ä–∞–µ–º –≤ –æ–±—ä–µ–∫—Ç: { tableName1: [...], tableName2: [...] }
                relatedRowsArray.forEach(({ table, rows }) => {
                    relatedData[table] = rows;
                });

                console.log('üß© relatedData:', relatedData);
            }
        } catch (err) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü:', err.message);
        }

        const getNiceType = t => ({ int: '–ß–∏—Å–ª–æ', bigint: '–ë–æ–ª—å—à–æ–µ —á–∏—Å–ª–æ', varchar: '–¢–µ–∫—Å—Ç', text: '–¢–µ–∫—Å—Ç', tinyint: '–î–∞/–ù–µ—Ç', datetime: '–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è', date: '–î–∞—Ç–∞', float: '–ß–∏—Å–ª–æ —Å –∑–∞–ø—è—Ç–æ–π', double: '–¢–æ—á–Ω–æ–µ —á–∏—Å–ª–æ', json: 'JSON', blob: '–§–∞–π–ª', enum: '–í—ã–±–æ—Ä', boolean: '–î–∞/–ù–µ—Ç' })[(t || '').toLowerCase().match(/^[a-z]+/)?.[0]] || t;


        res.render('table', {
            title: `–¢–∞–±–ª–∏—Ü–∞: ${tableName}`,
            tableName,
            displayFields,
            allTables: Object.keys(config.tables),
            data: rows,
            relations: relations,
            editable: config.tables[tableName].editable,
            config: config,
            fileFields: config.tables[tableName].fileFields,
            getNiceType: getNiceType,
            sortOrder: sortOrder,
            sortField: sortField,
            relatedData: relatedData,
            schema
        });
    });
    // –§–æ—Ä–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏
    app.get('/admin/:table/edit/:id', async (req, res) => {
        const table = req.params.table;
        const id = req.params.id;
        const configTable = config.tables[table];

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –ø–æ ID
        const [rows] = await pool.execute(`SELECT * FROM \`${table}\` WHERE id = ?`, [id]);
        const rowData = rows[0];

        if (!rowData) {
            return res.status(404).send("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
        }

        res.render('edit', {
            title: configTable.title || `–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ${table}`,
            tableName: table,
            id,
            data: rowData,
            fields: configTable.display,
            editable: configTable.editable,
            config: config,
            fileFields: configTable.fileFields || []
        });
    });


    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
    app.post('/admin/:table/add', express.urlencoded({ extended: true }), upload.any(), async (req, res) => {
        try {
            const table = req.params.table;
            const configTable = config.tables[table];
            console.log("asdasd")
            const data = {};
            for (const field of configTable.display) {
                if (field === "id") continue;

                const isFile = (configTable.fileFields || []).includes(field);
                if (isFile) {
                    console.log(req)
                    const uploadedFile = req.files.find(f => f.fieldname === field);
                    if (uploadedFile) {
                        data[field] = path.join("static/images", uploadedFile.filename);
                    }
                } else {
                    data[field] = req.body[field];
                }
            }
            const tableName = req.params.table;
            console.log("asdasd")
            console.log(req.params)


            const fields = Object.keys(req.body).concat(req.files.map((file) => file.fieldname));
            const values = Object.values(req.body).concat(req.files.map((file) => file.path.split('/').slice(file.path.split('/').findIndex((elem) => elem == config.database.staticDirName)).join("/")));
            const placeholders = fields.map(() => '?').join(', ');
            const sql = `INSERT INTO \`${tableName}\` (${fields.join(', ')}) VALUES (${placeholders})`;

            await pool.execute(sql, values);
            res.redirect(`/admin/${tableName}`);
        } catch (error) {
            console.log(error)
            if (error.code == 'ER_NO_REFERENCED_ROW_2') {
                const tableName = req.params.table;
                // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏, —Å—Å—ã–ª–∞—é—â–∏–µ—Å—è –Ω–∞ —ç—Ç—É —Ç–∞–±–ª–∏—Ü—É
                const [relations] = await pool.execute(`
                    SELECT TABLE_NAME, COLUMN_NAME, CONSTRAINT_NAME
                    FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE
                    WHERE REFERENCED_TABLE_NAME = ? AND TABLE_SCHEMA = ?
                  `, [tableName, config.database.database]);

                let relatedTables = [];

                for (const relation of relations) {
                    // –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ —Ä–µ–∞–ª—å–Ω–æ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ –¥—Ä—É–≥–∏—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö
                    const [rows] = await pool.execute(`
                        SELECT * FROM \`${relation.TABLE_NAME}\` WHERE \`${relation.COLUMN_NAME}\` = ?
                      `, [id]);

                    if (rows.length > 0) {
                        relatedTables.push({
                            table: relation.TABLE_NAME,
                            column: relation.COLUMN_NAME,
                            count: rows.length
                        });
                    }
                }

                let relatedInfo = relatedTables.map(rt =>
                    `‚Ä¢ –í —Ç–∞–±–ª–∏—Ü–µ ${rt.table} –Ω–∞–π–¥–µ–Ω–æ ${rt.count} –∑–∞–ø–∏—Å–µ–π, —Å—Å—ã–ª–∞—é—â–∏—Ö—Å—è –Ω–∞ —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ø–æ–ª–µ ${rt.column}`
                ).join('<br>');

                if (!relatedInfo) {
                    relatedInfo = '‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Å–≤—è–∑–∏, –Ω–æ –∑–∞–ø–∏—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–∏—á–∏–Ω–∞ –≤ –¥—Ä—É–≥–æ–π —Ç–∞–±–ª–∏—Ü–µ.';
                }

                res.render('error', {
                    title: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è',
                    message: `
                        –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã ${tableName}, 
                        —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –¥—Ä—É–≥–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏:${relatedInfo}
                        –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª–∏—Ç–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏.
                      `,
                    returnLink: `/admin/${tableName}`
                });

            }
        }
    });

    // –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ø–æ id
    app.post('/admin/:table/delete/:id', async (req, res) => {
        const tableName = req.params.table;
        const id = req.params.id;

        try {
            await pool.execute(`DELETE FROM \`${tableName}\` WHERE id = ?`, [id]);
            res.redirect(`/admin/${tableName}`);
        } catch (error) {
            if (error.code === 'ER_ROW_IS_REFERENCED_2' || error.errno === 1451) {
                // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏, —Å—Å—ã–ª–∞—é—â–∏–µ—Å—è –Ω–∞ —ç—Ç—É —Ç–∞–±–ª–∏—Ü—É
                const [relations] = await pool.execute(`
                  SELECT TABLE_NAME, COLUMN_NAME, CONSTRAINT_NAME
                  FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE
                  WHERE REFERENCED_TABLE_NAME = ? AND TABLE_SCHEMA = ?
                `, [tableName, config.database.database]);

                let relatedTables = [];

                for (const relation of relations) {
                    // –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ —Ä–µ–∞–ª—å–Ω–æ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ –¥—Ä—É–≥–∏—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö
                    const [rows] = await pool.execute(`
                      SELECT * FROM \`${relation.TABLE_NAME}\` WHERE \`${relation.COLUMN_NAME}\` = ?
                    `, [id]);

                    if (rows.length > 0) {
                        relatedTables.push({
                            table: relation.TABLE_NAME,
                            column: relation.COLUMN_NAME,
                            count: rows.length
                        });
                    }
                }

                let relatedInfo = relatedTables.map(rt =>
                    `‚Ä¢ –í —Ç–∞–±–ª–∏—Ü–µ ${rt.table} –Ω–∞–π–¥–µ–Ω–æ ${rt.count} –∑–∞–ø–∏—Å–µ–π, —Å—Å—ã–ª–∞—é—â–∏—Ö—Å—è –Ω–∞ —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ø–æ–ª–µ ${rt.column}`
                ).join('<br>');

                if (!relatedInfo) {
                    relatedInfo = '‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Å–≤—è–∑–∏, –Ω–æ –∑–∞–ø–∏—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–∏—á–∏–Ω–∞ –≤ –¥—Ä—É–≥–æ–π —Ç–∞–±–ª–∏—Ü–µ.';
                }

                res.render('error', {
                    title: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è',
                    message: `
                      –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å —Å id = ${id} –∏–∑ —Ç–∞–±–ª–∏—Ü—ã ${tableName}, 
                      —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –¥—Ä—É–≥–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏:${relatedInfo}
                      –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª–∏—Ç–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏.
                    `,
                    returnLink: `/admin/${tableName}`
                });
            } else {
                console.error(error);
                res.status(500).send('–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
            }
        }
    });


    app.post('/admin/:table/edit/:id', express.urlencoded({ extended: true }), upload.any(), async (req, res) => {
        const table = req.params.table;
        const id = req.params.id;
        const configTable = config.tables[table];

        const data = {};
        const fields = [];

        for (const field of configTable.editable) {
            const isFile = (configTable.fileFields || []).includes(field);

            if (isFile) {
                const uploadedFile = req.files.find(f => f.fieldname === field);
                if (uploadedFile) {
                    data[field] = path.join("static/images", uploadedFile.filename);
                    fields.push(field);
                }
                // –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º)
            } else {
                data[field] = req.body[field];
                fields.push(field);
            }
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å UPDATE
        const setClause = fields.map(f => `\`${f}\` = ?`).join(', ');
        const values = fields.map(f => data[f]);

        const sql = `UPDATE \`${table}\` SET ${setClause} WHERE id = ?`;
        values.push(id);

        await pool.execute(sql, values);
        res.redirect(`/admin/${table}`);
    });

    app.post('/admin/:table/edit/:id', express.urlencoded({ extended: true }), async (req, res) => {
        const tableName = req.params.table;
        const id = req.params.id;

        const fields = Object.keys(req.body);
        const values = Object.values(req.body);
        const updates = fields.map(f => `\`${f}\` = ?`).join(', ');

        const sql = `UPDATE \`${tableName}\` SET ${updates} WHERE id = ?`;
        await pool.execute(sql, [...values, id]);

        res.redirect(`/admin/${tableName}`);
    });


};

